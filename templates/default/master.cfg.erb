# -*- python -*-
# ex: set syntax=python:

#
# IMPORTANT: This file was automatically generated by Chef.
# Do not edit it by hand.
#

from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
# c['workers'] = [worker.Worker("example-worker", "pass")]

c['workers'] = [ <% @workers.each do |worker| %>
    worker.Worker("<%= worker['name'] %>", "<%= worker['password'] %>"),
<% end %>]

#This explicitly needs to be done here to run Docker Workers
c['workers'].append(worker.DockerLatentWorker(
        'test-worker',
        'test-worker-password',
        docker_host='tcp://<%= @worker_ipaddress %>:2375',
        image='docker/image',
        version='version')
)
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': <%= @worker_port %> }}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'] = [ <% @change_sources.each do |source| %>
    <%= source %>,
<% end %>]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'] = [ <% @schedulers.each do |scheduler| %>
    <%= scheduler %>,
<% end %>]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
# factory.addStep(steps.Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
# factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))

# Steps
<% @steps.each do |step| %>factory.addStep(<%= step %>)
<% end %>

c['builders'] = []
c['builders'] = [ <% @builders.each do |builder| %>
    <%= builder %>,
<% end %>]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "<%= @title %>"
c['titleURL'] = "<%= @title_url %>"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://<%= @host %>"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
# This specifies what database buildbot uses to store its state.  You can leave
# this at its default for all but the largest installations.

<% @databases.each do |db| %>
    'db_url': "<%= db %>",
<% end %>
}
